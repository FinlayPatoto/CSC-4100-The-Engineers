         		+--------------------+
			|      CSC 4100      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

John Donnell <jmdonnell43@tntech.edu>
Finlay Patoto <	frpatoto42@tntech.edu>
Katie Swinea <keswinea42@tntech.edu>

---- PRELIMINARIES ----

This is just the original submission for the design document.
It will mostly have the outlines indicated by the >> symbol
for the group's use and reference for each part of project and
each part's sections. It will be filled out throughout the
project as different parts are completed and implemented.

No outside sources have been used so far. If any are used
they will be added and cited here appropriately.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We have not finialized these changes yet to get a working alarm. At this point
in time, we have changed the threat struct to include wakeup times. We have 
also added a queue to hold all the threads that are waiting. We also used an 
enumeration for the interrupt level and the current level for that thread. 
These are done to hold the wait time to run in the background instead of the
busy wait and for disabling interrupts.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep() still gets the interrupt level and starts the timer_ticks,
but it then goes on to use the enum for the interrupt levels and store the
wake up time in the thread structure. It then blocks the thread and disables
the interrupt. The interrupt handler gets the thread in the waiting queue,
if it is not time to wake up yet, nothing happens. Otherwise, it removes the
thread from the list and unblocks it.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

It makes efforts to quickly get thread information by getting the information
at initilization. It also doesn't waste time if it is not ready to be removed
by using an if statement to break out of the function.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

The waiting queue should be achieving this.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

By turning off the interrupts.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Currently, this is the first iteration. It could easily become better.
In theory, this design should meet the requirments which is why we are
pursuing it.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We have not gotten to this part of the project yet for development.
It is assumed at least the thread structure needs to be changed and
a priority queue will need to be added.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Probably an if statement when waking it up or some kind of way to
organize the queue were highest priority are in there first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

This will happen if another function or variable is needed for other's
to use it. Cannot tell specific events. Nested donation makes me think 
the logic needs to be similar to nested for loops in executions (not 
implemented with a for loop though).

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER (Extra Credit)
			  =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
